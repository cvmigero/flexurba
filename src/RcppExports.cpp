// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// majority_rule_R2022A
Rcpp::NumericVector majority_rule_R2022A(Rcpp::NumericVector x, int value_of_interest, size_t ni, size_t nw);
RcppExport SEXP _flexurba_majority_rule_R2022A(SEXP xSEXP, SEXP value_of_interestSEXP, SEXP niSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type value_of_interest(value_of_interestSEXP);
    Rcpp::traits::input_parameter< size_t >::type ni(niSEXP);
    Rcpp::traits::input_parameter< size_t >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(majority_rule_R2022A(x, value_of_interest, ni, nw));
    return rcpp_result_gen;
END_RCPP
}
// majority_rule_R2023A
Rcpp::NumericVector majority_rule_R2023A(Rcpp::NumericVector x, int adj_value, int ignore_value, int water_value, int adj_ignore, size_t ni, size_t nw);
RcppExport SEXP _flexurba_majority_rule_R2023A(SEXP xSEXP, SEXP adj_valueSEXP, SEXP ignore_valueSEXP, SEXP water_valueSEXP, SEXP adj_ignoreSEXP, SEXP niSEXP, SEXP nwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type adj_value(adj_valueSEXP);
    Rcpp::traits::input_parameter< int >::type ignore_value(ignore_valueSEXP);
    Rcpp::traits::input_parameter< int >::type water_value(water_valueSEXP);
    Rcpp::traits::input_parameter< int >::type adj_ignore(adj_ignoreSEXP);
    Rcpp::traits::input_parameter< size_t >::type ni(niSEXP);
    Rcpp::traits::input_parameter< size_t >::type nw(nwSEXP);
    rcpp_result_gen = Rcpp::wrap(majority_rule_R2023A(x, adj_value, ignore_value, water_value, adj_ignore, ni, nw));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flexurba_majority_rule_R2022A", (DL_FUNC) &_flexurba_majority_rule_R2022A, 4},
    {"_flexurba_majority_rule_R2023A", (DL_FUNC) &_flexurba_majority_rule_R2023A, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_flexurba(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
