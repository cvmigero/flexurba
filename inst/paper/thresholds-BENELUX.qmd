```{r}
# read test datasets

library(dplyr)
library(devtools)
library(testthat)

load_all()

pop <- terra::rast(here::here('test-develop/pop.tif')) %>% 
  terra::crop(terra::ext(192000, 485000, 5821000, 6030000))

built <- terra::rast(here::here('test-develop/built.tif')) %>% 
  terra::crop(terra::ext(192000, 485000, 5821000, 6030000))
built <- built/1000000

lights <- terra::rast(here::here('test-develop/lights.tif')) %>% 
  terra::crop(terra::ext(192000, 485000, 5821000, 6030000))

pop2 <- terra::rast(here::here('test-develop/pop.tif')) %>% 
  terra::crop(terra::ext(192000, 530000, 5821000, 6270000))

built2 <- terra::rast(here::here('test-develop/built.tif')) %>% 
  terra::crop(terra::ext(192000, 530000, 5821000, 6270000))
built2 <- built2/1000000

lights2 <- terra::rast(here::here('test-develop/lights.tif')) %>% 
  terra::crop(terra::ext(192000, 530000, 5821000, 6270000))

countries <- sf::st_read(here::here("inst/paper/countries.geojson"), quiet = TRUE)
countries2 <- countries %>%
  dplyr::filter(CNTR_ID %in% c('BE', 'NL', 'LU'))

country_grid <- terra::rasterize(terra::vect(countries2), pop2, 'CNTR_ID')
belgium <- terra::rasterize(terra::vect(countries %>%
                        dplyr::filter(CNTR_ID == "BE")), pop, 'CNTR_ID')

pop2 <- mask(pop2, country_grid)
built2 <- mask(built2, country_grid)
lights2 <- mask(lights2, country_grid)

pop <- mask(pop, belgium)
built <- mask(built, belgium)
lights <- mask(lights, belgium)

```

**To construct the plot**

```{r}

library(sf)
library(terra)
library(ggplot2)
library(shadowtext)
library(ggspatial)
library(ggpubr)
library(tidyterra)

# load countries and cities
countries <- sf::st_read(here::here("inst/paper/countries.geojson"), quiet = TRUE)
cities <- sf::st_read(here::here("inst/paper/cities2.geojson"), quiet = TRUE)

# create labels of cities, and offset the position
labels <- cities
st_geometry(labels) <- st_sfc(
  ifelse(labels$city_ascii %in% c("Rotterdam", "Bruges"),
    st_sfc(st_geometry(labels) - st_sfc(st_point(c(10000, 10000)))),
    st_sfc(st_geometry(labels) - st_sfc(st_point(c(-12000, -10000))))
  ),
  crs = st_crs(labels$geometry)
)

color <- c('#d53d3d','#5f91cb','#dace4e', 'grey55')


create_plot <- function(layer, color, title, bel=TRUE){
  
  
  if (bel){
    x <- 485000
    y <- 6030000
    city <- cities %>% filter(country == "BE")
    lab <- labels %>% filter(country == "BE")
  } else {
    x <- 530000
    y <- 6270000
    city <- cities
    lab <- labels
  }
  
  ggplot() + 
   tidyterra::geom_spatraster(data = 
                             layer, aes(fill=which)) +
  scale_fill_gradient(
    low=color,
    high=color,
    na.value = "NA",
    guide = 'none'
  ) + geom_sf(
    data = countries,
    fill = NA,
    colour = "#2F2F2F"
  ) +
  geom_sf(
    data = city,
    color = "#2F2F2F",
    size = 0.7
  ) +
  geom_shadowtext(
    data = lab, aes(
      x = st_coordinates(geometry)[, 1],
      y = st_coordinates(geometry)[, 2],
      label = city_ascii
    ),
    bg.color = "white", color = "black", size = 2
  ) +
  xlim(192000, x) +
  ylim(5821000, y) +
  theme_void() +
  ggspatial::annotation_scale(
    pad_x = grid::unit(0.08, "npc"),
    pad_y = grid::unit(0.10, "npc"),
    width_hint = 0.10,
    height = grid::unit(0.05, "cm"),
    bar_cols = c("black")
  ) +
  theme(
    plot.margin = unit(c(0, 0, 0, 0.7), "cm"),
  ) + annotation_custom(grid::grobTree(shadowtextGrob(title, x=0.03, 
                                       y=if (grepl('\n', title)) 0.945 else 0.97 , 
                                       hjust=0, gp=gpar(col="#2F2F2F",
                                       fontsize=8, fontface="bold"), 
                                       bg.colour = 'white')))

}
```

**Absolute thresholds**

```{r}
create_plot(apply_absolute_threshold(pop, 1000), color[1], 'Population > 1000')

create_plot(apply_absolute_threshold(built, 0.15), color[2], 'Built-up > 15%')

create_plot(apply_absolute_threshold(lights, 15), color[3], 'Light > 15')


create_plot(apply_absolute_threshold(pop, 2000), color[1], 'Population > 2000')

create_plot(apply_absolute_threshold(built, 0.25), color[2], 'Built-up > 25%')

create_plot(apply_absolute_threshold(lights, 25), color[3], 'Light > 25')
```

**Relative thresholds**

```{r}
p1 <- create_plot(apply_absolute_threshold(pop2, 2000), color[1], '(A) Population > 2000 inhab./km²', FALSE)

p2 <- create_plot(apply_absolute_threshold(built2, 0.20), color[2], '(B) Built-up fraction > 20%', FALSE)

p3 <- create_plot(apply_absolute_threshold(lights2, 20), color[3],'(C) Light intensity > 20 nW/cm²/sr',  FALSE)




p4 <- create_plot(apply_relative_threshold(pop2, 'p95', country_grid), color[1], '(D) Population > 95th percentile\nper country', FALSE)

p5 <- create_plot(apply_relative_threshold(built2, 'p95', country_grid), color[2], '(E) Built-up fraction > 95th percentile\nper country', FALSE)

p6 <- create_plot(apply_relative_threshold(lights2, 'p95', country_grid), color[3],'(F) Light intensity > 95th percentile\nper country',  FALSE)

p <- ggarrange(p1, p2, p3, p4, p5, p6, nrow=2, ncol=3)
```

```{r}
ggsave(here::here('inst/paper/figurre-gisruk2025-2.png'), p, width=8, height=6)
```

**Combination**

```{r}
layer <- any(apply_absolute_threshold(pop2, 1000), 
             apply_absolute_threshold(built2, 0.15),
             apply_absolute_threshold(lights2, 15)) %>%
  apply_majority_rule_R2022A()
create_plot(layer, color[4], 'Population > 1000\nor Built-up > 15%\nor Light > 15', FALSE)


layer <- any(all(apply_absolute_threshold(lights2, 15), 
             apply_absolute_threshold(built2, 0.15)),
             apply_absolute_threshold(pop2, 1000)) %>%
  apply_majority_rule_R2022A()
create_plot(layer, color[4], '(Light > 15 or Built-up > 15%)\nand Population > 1000', FALSE)

layer <- all(apply_relative_threshold(lights2, 'p90', country_grid), 
             apply_absolute_threshold(pop2, 1500)) %>%
  apply_majority_rule_R2022A()
create_plot(layer, color[4], 'Light > 90th percentile\nand population > 1500', FALSE)

```
